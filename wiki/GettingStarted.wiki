=Getting Started= 

==Step 1 : Prerequisites==
  *	Get the API Keys, secrets and callback urls: You can get them from the following URLs :
   * Twitter - [http://twitter.com/apps]
   * Facebook - [http://www.facebook.com/developers/apps.php]
   * MySpace - (show screenshot) - [http://developer.myspace.com/Apps.mvc]
   * Linkedin - (show screenshot) - [https://www.linkedin.com/secure/developer]

  * 	Replace the keys and secrets in oauth_consumer.properties file with your keys and secrets.

  *	Replace the callback urls and cancel urls in callback.properties file with your callbacks urls and cancel urls. To know more about callback urls and cancel urls refer this document.

  *	Add both the properties file in assets folder of your application.

==Step 2 : Adding library==
  * Add socialauth-android.jar and socialauth.jar in libs folder of you app. If you are using ADT17 or more then you need to rename the lib folder in your app to libs. Your app will add the jar to build path automatically if you are using ADT 17.

  *	Now order your jar to top as show below and export.

  *	Add images from zip folder to drawables.

==Step 3 : Implementation==

You can use libarary in following three ways  :

 * *Share Button* – This option lets you integrate share button in your app. You will get list of providers on clicking the share button as shown below :

https://socialauth-android.googlecode.com/svn/wiki/images/socialshare.png

  When user clicks on the provider, in your handling code you should :
   *	Create instance of SocialAuthShareButton.
   *	Call enable() method to enable providers
   *	Receive the response in ResponseListener, A Dialoglistener to listen responses. 
   *	Call update() to share the status.

{{{	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
      
        // Welcome Message
        TextView textview = (TextView)findViewById(R.id.text);
        textview.setText("Welcome to SocialAuth Demo. We are sharing text SocialAuth Android by share button.");
        
        
        //Create Your Own Share Button
        Button share = (Button)findViewById(R.id.sharebutton);
        share.setText("Share");
        share.setTextColor(Color.WHITE);
        share.setBackgroundResource(R.drawable.button_gradient);
        		
        // Add it to Libarary
        adapter = new SocialAuthShareButton(this,share,new ResponseListener());
             	 
        // Add providers
        adapter.enable(providers , images);
        		
        // set Size of Dialog
        adapter.setDialogSize(30,60);
    }
}}}
  
  To see the full functionality, download *SocialSampleShareButton example* from Downloads page.
  
 * *Bar* – This option lets you integrate a bar of providers in your app as shown below :

https://socialauth-android.googlecode.com/svn/wiki/images/sharebar.png

  When user clicks on the provider, in your handling code you should :
   *	Create instance of SocialAuthShareBar.
   *	Call enable() method to enable providers
   *	Receive the response in ResponseListener, A Dialoglistener to listen responses. 
   * 	Call update() to share the status.

{{{

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
      
        // Welcome Message
        TextView textview = (TextView)findViewById(R.id.text);
        textview.setText("Welcome to SocialAuth Demo. We are sharing text SocialAuth Android by share button.");
        
        
        //Create Your Own Share Button
        Button share = (Button)findViewById(R.id.sharebutton);
        share.setText("Share");
        share.setTextColor(Color.WHITE);
        share.setBackgroundResource(R.drawable.button_gradient);
        		
        // Add it to Libarary
        adapter = new SocialAuthShareButton(this,share,new ResponseListener());
             	 
        // Add providers
        adapter.enable(providers , images);
        		
        // set Size of Dialog
        adapter.setDialogSize(30,60);
    }
}}}

 To see the functionality, download *SocialSampleShareBar example* from Downloads page.

 * *Custom* -  This option lets you implement providers in your way. You can show them either in ListView , GridView , Context Menu , Dialog or any way you want. This option lets you : 

*Share messages*  
https://socialauth-android.googlecode.com/svn/wiki/images/socialauthmsg.png

*Show user profiles*
https://socialauth-android.googlecode.com/svn/wiki/images/socialauthprofile.png

*Get user contacts*
https://socialauth-android.googlecode.com/svn/wiki/images/socialauthcontacts.png

  When user clicks on the provider , in your handling code you should :
   *    Create instance of SocialAuthAdapter.
   *	Call enable() method to enable providers
   *	Receive the response in ResponseListener, A Dialoglistener to listen responses. 
   *	Call update() to share the status.
   *	Call showprofile() to view user profile details
   *	Call getContacts() to show user contacts.

 To see the functionality, download *SocialAuthAdapter example* from Downloads page.

==Share Messages==
You can use either of three ways mentioned above to share messages. SocialAuthShareButton and SocialAuthShareBar classes are designed to give user leverage to share messages automatically. Here is the code :

{{{

// To share message

SocialAuthShareButton adapter = new SocialAuthShareButton(this,share,new ResponseListener());
adapter.update("SocialAuth Android"); // In ResponseListener

}}}

==View user Profile==
You can view user profile by using SocialAuthAdapter class. Here is the code.
{{{

// To show user profile

SocialAuthAdapter.showProfile();

}}}

==Get Contacts==
You can get contacts by using SocialAuthAdapter class. Here is the code.

{{{

// Get Contacts

SocialAuthAdapter.getContacts();
 
}}}